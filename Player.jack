class Player {
    static int x, y;
    static boolean hasMug;
    

    constructor Player new(int x, int y)
    {
        let x = x;
        let y = y;
        let hasMug = true;
        return this;
    }

    method int returnX()
    {
        return x;
    }

    method int returnY()
    {
        return y;
    }
    
    method void move() 
    {
        var Mug mug;
        //var Tips tips;
        //var Dancer dancer;
        //var int xTips, yTips;
        if ((Keyboard.keyPressed() = 32) & (hasMug))
        {
            let mug = Mug.new(x , y);
            let hasMug = false;
        }
        else
        {
            if ((Keyboard.keyPressed() = 32) & (~hasMug))
            {
                let hasMug = true;
            }
        }
        if (Keyboard.keyPressed() = 130)
        { 
            do Player.clearOnlyPlayer();
            if (x > 0) {
                let x = x - 2;
            }
            else{
                let x = x;
            }
            do Player.draw();
        }
        if (Keyboard.keyPressed() = 132)  
        { 
            do Player.clearOnlyPlayer();
            if (x < 512) {
                let x = x + 2;
            }
            else{
                let x = x;
            }
            do Player.draw();
        }
        if (Keyboard.keyPressed() = 131)  
        { 
            do Player.clearOnlyPlayer();
            let y = y + 2; 
            do Player.draw();
        }
        if (Keyboard.keyPressed() = 133)  
        { 
            do Player.clearOnlyPlayer();
            let y = y - 2;
            do Player.draw();
        }
        //let xTips = tips.returnX();
        //let yTips = tips.returnY();
        //if (x = xTips){
        //    if (y = yTips){
        //    do tips.dispose();
        //    do dancer.dance();
        //    }} 
        return;
    }

    function void draw() {
        if (hasMug) {
            do Player.drawWithBeer(); 
        } else {
            do Player.drawWithoutBeer();
        }
        return;
    }

    function void drawWithBeer() {
	var int memAddress; 
	let memAddress = 16384 + y;
	// column 0
	do Memory.poke(memAddress, 56);
	do Memory.poke(memAddress +32, 40);
	do Memory.poke(memAddress +64, 56);
	do Memory.poke(memAddress +96, 16);
	do Memory.poke(memAddress +128, 3640);
	do Memory.poke(memAddress +160, 4079);
	do Memory.poke(memAddress +192, 3640);
	do Memory.poke(memAddress +224, 40);
	do Memory.poke(memAddress +256, 68);
	do Memory.poke(memAddress +288, 130);
	return;
    }
    function void drawWithoutBeer() {
	var int memAddress; 
	let memAddress = 16384+y;
	// column 0
	do Memory.poke(memAddress, 56);
	do Memory.poke(memAddress +32, 40);
	do Memory.poke(memAddress +64, 56);
	do Memory.poke(memAddress +96, 16);
	do Memory.poke(memAddress +128, 3640);
	do Memory.poke(memAddress +160, 3055);
	do Memory.poke(memAddress +192, 3640);
	do Memory.poke(memAddress +224, 40);
	do Memory.poke(memAddress +256, 68);
	do Memory.poke(memAddress +288, 130);
	return;
    }

    function void clearOnlyPlayer() {
	var int memAddress; 
	let memAddress = 16384+y;
	// column 0
	do Memory.poke(memAddress, 0);
	do Memory.poke(memAddress +32, 0);
	do Memory.poke(memAddress +64, 0);
	do Memory.poke(memAddress +96, 0);
	do Memory.poke(memAddress +128, 0);
	do Memory.poke(memAddress +160, 0);
	do Memory.poke(memAddress +192, 0);
	do Memory.poke(memAddress +224, 0);
	do Memory.poke(memAddress +256, 0);
	do Memory.poke(memAddress +288, 0);
	return;
    }
}