class Visitors {
    field int x, y;
    field int speed;
    field boolean wantsDrink;
    field boolean hasEmptyMug;
    field int howOften;

    constructor Visitors new(int x, int y)
    {
        let x = x;
        let y = y;
        let wantsDrink = true;
        let hasEmptyMug = true;
        return this;
    }
    method int returnX()
    {
        return x;
    }
    method int returnY()
    {
        return y;
    }
    method void move() 
    {
        var int xRows, yRows;
        var int xMug, yMug;
        var Visitors visitor;
        var Mug mug;
        do Visitors.draw(x);
        while(wantsDrink)
        {
            do Visitors.clean(x);
            let x = x + 3;
            do Visitors.draw(x);
            if (x = 200)
            {
                if (wantsDrink)
                {
                    do Tapper.deleteLife();
                    do visitor.dispose();
                }
            }
            let xMug = mug.returnX();
            let yMug = mug.returnY();
            if (x = xMug)
            {
                if (y = yMug)
                {
                    let wantsDrink = false;
                }
            }
        }
        while(~wantsDrink)
        {
            do Visitors.clean(x);
            let x = x - 3;
            do Visitors.draw(x);
            if (x = 0)
            {
                do Memory.deAlloc(this);
            }
        }
        return;
    }

    function void draw(int location) {
    	var int memAddress; 
    	let memAddress = 16384+location;
    	// column 0
    	do Memory.poke(memAddress, 120);
    	do Memory.poke(memAddress +32, 120);
    	do Memory.poke(memAddress +64, 510);
    	do Memory.poke(memAddress +96, 120);
    	do Memory.poke(memAddress +128, 72);
    	do Memory.poke(memAddress +160, 120);
    	do Memory.poke(memAddress +192, 48);
    	do Memory.poke(memAddress +224, 252);
    	do Memory.poke(memAddress +256, 903);
    	do Memory.poke(memAddress +288, 132);
    	do Memory.poke(memAddress +320, 252);
    	do Memory.poke(memAddress +352, 72);
    	do Memory.poke(memAddress +384, 72);
    	return;
    }
     function void clean(int location) {
    	var int memAddress; 
    	let memAddress = 16384+location;
    	// column 0
    	do Memory.poke(memAddress, 0);
    	do Memory.poke(memAddress +32, 0);
    	do Memory.poke(memAddress +64, 0);
    	do Memory.poke(memAddress +96, 0);
    	do Memory.poke(memAddress +128, 0);
    	do Memory.poke(memAddress +160, 0);
    	do Memory.poke(memAddress +192, 0);
    	do Memory.poke(memAddress +224, 0);
    	do Memory.poke(memAddress +256, 0);
    	do Memory.poke(memAddress +288, 0);
    	do Memory.poke(memAddress +320, 0);
    	do Memory.poke(memAddress +352, 0);
    	do Memory.poke(memAddress +384, 0);
    	return;
    }
    
    method void dispose() {
            do Memory.deAlloc(this);
            return;
        }
}