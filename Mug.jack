class Mug
{
    field boolean ifFull;
	field int getX;
	field int y;
	field int levelMug;
    constructor Mug new(int level)
    {
		if (level = 1)
		{ 
			let y = 5626;
		}
		else
		{
			let y = 2520;
		}
		let getX = 200;
		let levelMug = Player.returnLevel();
        let ifFull = true;
        return this;
    }

	method int returnX()
	{
		return getX;
	}


    method void dispose()
    {
		do Mug.clearMug(getX, y);
        do Memory.deAlloc(this);
        return;
    }
    method void move()
	{
		var Player player;
		var Mug mug;
		var int levelPlayer;
		var Visitors visitor;
		var int location;
		if (~ifFull) 
        {
			while (getX < 512)
			{
				do Mug.emptyMug(getX, y);
				do Mug.clearMug(getX, y);
				let getX = getX + 16;
			}
			let levelPlayer = Player.returnLevel();
			if (~(levelPlayer = levelMug))
			{
				do Tapper.deleteLife();
			}
        } 
		else
		{
			while (getX > 0)
			{
				do Mug.fullMug(getX, y);
				do Mug.clearMug(getX, y);
				let getX = getX - 16;
				//let location = visitor.returnX();
				// if (getX = location)
				// {
				// }
			}
		}
		return;
	}
    
    function void fullMug(int x, int y) {
	var int memAddress; 
	let memAddress = 16384 + 32 + x/16 + y;
	// column 0
	do Memory.poke(memAddress, 1023);
	do Memory.poke(memAddress +32, 8191);
	do Memory.poke(memAddress +64, 5119);
	do Memory.poke(memAddress +96, 8191);
	do Memory.poke(memAddress +128, 1023);
	do Memory.poke(memAddress +160, 510);
	do Memory.poke(memAddress +192, 252);
	return;
}
    
    function void emptyMug(int x, int y) {
	var int memAddress; 
	let memAddress = 16384 + x/16 + y;
	// column 0
	do Memory.poke(memAddress, 903);
	do Memory.poke(memAddress +32, 8071);
	do Memory.poke(memAddress +64, 4999);
	do Memory.poke(memAddress +96, 8071);
	do Memory.poke(memAddress +128, 1023);
	do Memory.poke(memAddress +160, 510);
	do Memory.poke(memAddress +192, 252);
	return;
	}
	function void clearMug(int x, int y) {
	var int memAddress; 
	let memAddress = 16384 + x/16 + y + 32;
	// column 0
	do Memory.poke(memAddress, 0);
	do Memory.poke(memAddress +32, 0);
	do Memory.poke(memAddress +64, 0);
	do Memory.poke(memAddress +96, 0);
	do Memory.poke(memAddress +128, 0);
	do Memory.poke(memAddress +160, 0);
	do Memory.poke(memAddress +192, 0);
	return;
	}
}