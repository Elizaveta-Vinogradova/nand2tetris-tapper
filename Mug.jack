class Mug
{
    field boolean ifFull;
	field int x;
	field int levelMug;
    constructor Mug new(int level)
    {
		if (level = 1)
		{ 
			let x = 5626;
		}
		else
		{
			let x = 2520;
		}
		let levelMug = Player.returnLevel();
        let ifFull = true;
        return this;
    }

	method int returnX()
	{
		return x;
	}

    method void dispose()
    {
		do Mug.clearMug(x);
        do Memory.deAlloc(this);
        return;
    }
    method void move()
	{
		var Player player;
		var Mug mug;
		var int levelPlayer;
		if (~ifFull) 
        {
			while (x < 512)
			{
				do Mug.emptyMug(x);
				do Mug.clearMug(x);
				let x = x + 16;
			}
			if (~(levelPlayer = levelMug))
			{
				do Tapper.deleteLife();
			}
        } 
		else
		{
			while (x > 0)
			{
				do Mug.fullMug(x);
				do Mug.clearMug(x);
				let x = x - 16;
			}
		}
		return;
	}
    
    function void fullMug(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, 1023);
	do Memory.poke(memAddress +32, 8191);
	do Memory.poke(memAddress +64, 5119);
	do Memory.poke(memAddress +96, 8191);
	do Memory.poke(memAddress +128, 1023);
	do Memory.poke(memAddress +160, 510);
	do Memory.poke(memAddress +192, 252);
	return;
}
    
    function void emptyMug(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, 903);
	do Memory.poke(memAddress +32, 8071);
	do Memory.poke(memAddress +64, 4999);
	do Memory.poke(memAddress +96, 8071);
	do Memory.poke(memAddress +128, 1023);
	do Memory.poke(memAddress +160, 510);
	do Memory.poke(memAddress +192, 252);
	return;
	}
	function void clearMug(int location) {
	var int memAddress; 
	let memAddress = 16384+location;
	// column 0
	do Memory.poke(memAddress, 0);
	do Memory.poke(memAddress +32, 0);
	do Memory.poke(memAddress +64, 0);
	do Memory.poke(memAddress +96, 0);
	do Memory.poke(memAddress +128, 0);
	do Memory.poke(memAddress +160, 0);
	do Memory.poke(memAddress +192, 0);
	return;
	}
}